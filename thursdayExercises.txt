Ã–vningar del 1:

ğŸ§© LÃ¤tta Ã–vningar (1-2)

1: Skapa en ny route som returnerar ditt namn:

Endpoint: /api/name

Response:
{ "name": "Ditt Namn" }

Tips: AnvÃ¤nd res.json().
-------------------------------------------
2: Skicka en parameter i URL:en:

Endpoint: /api/greet/:name

Exempelanrop: /api/greet/Alice
/api/greet/mAndus

Response:
{ "message": "Hej Alice!" }
{ "message": "Hej mAndus!" }

Tips: AnvÃ¤nd req.params.name.
-------------------------------------------
-------------------------------------------
-------------------------------------------
ğŸ”§ MedelsvÃ¥ra Ã–vningar (3-4)

3: GÃ¶r en GET-route som hÃ¤mtar data frÃ¥n ett objekt:

Objektet ska innehÃ¥lla information om nÃ¥gra kurser:
const courses = [
  { id: 1, name: 'JavaScript Grundkurs' },
  { id: 2, name: 'Backend med Express' }
];

Endpoint: /api/courses

Response:
[
  { "id": 1, "name": "JavaScript Grundkurs" },
  { "id": 2, "name": "Backend med Express" }
]
-------------------------------------------
4: POST-request som tar emot data:

Endpoint: /api/add

Metod: POST

InnehÃ¥ll i body:
{ "title": "Ny kurs", "description": "LÃ¤r dig mer om Express" }

Spara kursen i en array och returnera hela listan.
-------------------------------------------
-------------------------------------------
-------------------------------------------
ğŸš€ SvÃ¥ra Ã–vningar (5-6)

5: Implementera en DELETE-route:

Endpoint: /api/courses/:id

AnvÃ¤nd req.params fÃ¶r att hitta kursen med angivet ID och ta bort den.

Returnera den uppdaterade listan.
-------------------------------------------
6: Skapa en PUT-route som uppdaterar en kurs:

Endpoint: /api/courses/:id

Metod: PUT

InnehÃ¥ll i body:
{ "name": "Uppdaterad kurs" }

Uppdatera kursen med motsvarande ID och returnera den uppdaterade listan.
-------------------------------------------
-------------------------------------------
-------------------------------------------
ğŸ’¾ Bonus: Middleware fÃ¶r Loggning

7:LÃ¤gg till en middleware som loggar alla inkommande requests:
app.use((req, res, next) => {
    console.log(`${req.method} ${req.url}`);
    next();
});
-------------------------------------------
-------------------------------------------
-------------------------------------------
âœ… Reflektion och Avslutning
Hur kÃ¤nns det att arbeta med Express?
Vilka utmaningar stÃ¶tte ni pÃ¥?
Hur kan vi utÃ¶ka API:et fÃ¶r att hantera mer komplex data?

-------------------------------------------
-------------------------------------------
-------------------------------------------
-------------------------------------------
-------------------------------------------
-------------------------------------------
Ã–vningar del 2:

SjÃ¤lvstÃ¤ndiga Ã–vningar

ğŸ§© LÃ¤tta (3 st):
1: Skapa en route /api/status som returnerar:

{ "status": "OK" }

---------------------------------------------
2: Skapa en route /api/greet som tar ett namn som query-param och svarar med:

{ "message": "Hej, Alice!" }

---------------------------------------------
3: Skapa en route /api/echo som returnerar alla headers.
---------------------------------------------
---------------------------------------------
---------------------------------------------
ğŸ”§ Medel (3 st):
1: Skapa en PATCH-route fÃ¶r att uppdatera en anvÃ¤ndare.
---------------------------------------------

2: Implementera en middleware som loggar alla inkommande requests. (Frivillig, middleware kommer vi prata mer om.)
---------------------------------------------

3: Skapa en enkel databas i JSON-format och anvÃ¤nd den i en GET-route.
---------------------------------------------
---------------------------------------------
---------------------------------------------

ğŸš€ SvÃ¥ra (3 st):
1: Implementera ett autentiseringssystem med en header Authorization. (Frivillig, middleware kommer vi prata mer om.)
---------------------------------------------

2: Bygg en CRUD-app med anvÃ¤ndare/husdjur/bilar/tv-spel.
---------------------------------------------

3: LÃ¤gg till validering av inkommande data.
---------------------------------------------